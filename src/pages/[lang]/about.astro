---
import { languages } from "@lib/i18n/ui";
import { otherLanguage, useTranslations } from "@lib/i18n/utils";
import { getRelativeLocaleUrl } from "astro:i18n";

import BaseLayout from "../../layouts/BaseLayout.astro";

export async function getStaticPaths() {
  const langKeys = Object.keys(languages);
  const paths = langKeys.map((lk) => {
    const otherLang = otherLanguage(lk);
    return {
      params: {
        lang: lk,
      },
      props: {
        otherLangPath: `${getRelativeLocaleUrl(otherLang)}/about`,
      },
    };
  });

  return paths;
}
const { lang } = Astro.params;
const { otherLangPath } = Astro.props;

const t = useTranslations(lang as 'en' | 'de');
const pageTitle = t('page.about');

const identity = {
  firstName: "Sarah",
  country: "Canada",
  occupation: "Technical Writer",
  hobbies: ["photography", "birdwatching", "baseball"],
};

const skills = ["HTML", "CSS", "JavaScript", "React", "Astro", "Writing Docs"];

const happy = true;
const finished = true;
const goal = 3;

const skillColor = "navy";
const fontWeight = "bold";
const textCase = "uppercase";

console.log(`about - lang: ${lang}, otherLangPath: ${otherLangPath}`);
---

<BaseLayout lang={lang} langSwitchPath={otherLangPath} pageTitle={pageTitle}>
  <style define:vars={{ skillColor, fontWeight, textCase }}>
    h1 {
      color: purple;
      font-size: 4rem;
    }
    .skill {
      color: var(--skillColor);
      font-weight: var(--fontWeight);
      text-transform: var(--textCase);
    }
  </style>
  <p>{t('about.facts')}</p>
  <ul>
    <li>{t('about.name')} {identity.firstName}.</li>
    <li>{t('about.location')} {identity.country} {t('about.occupation')} {identity.occupation}.</li>
    {
      identity.hobbies.length >= 2 && (
        <li>
          {t('about.hobbies')} {identity.hobbies[0]} and {identity.hobbies[1]}
        </li>
      )
    }
  </ul>
  <p>{t('about.skills')}</p>
  <ul>
    {skills.map((skill) => <li class="skill">{skill}</li>)}
  </ul>
  {happy && <p>{t('about.happy')}</p>}

  {finished && <p>{t('about.finished')}</p>}

  {
    goal === 3 ? (
      <p>{t('about.goal')}</p>
    ) : (
      <p>{t('about.goal.not')}</p>
    )
  }
</BaseLayout>
