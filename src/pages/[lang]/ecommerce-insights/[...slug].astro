---
import { getCollection } from "astro:content";
import MarkdownPostLayout from "../../../layouts/MarkdownPostLayout.astro";
import { languages } from "@i18n/ui";
import {
  filterPostsForLang,
  otherLanguage,
  getPostsByIdAndLang,
} from "@i18n/utils";

export async function getStaticPaths() {
  const supportedLanguages = Object.keys(languages);
  const blogPosts = await getCollection("posts");

  const paths = supportedLanguages
    .map((selectedLang: string) => {
      return filterPostsForLang(blogPosts, selectedLang).map((post) => {
        let createLinkRelHreflang = false;

        const [, ...slug] = post.slug.split("/");
        const lang = selectedLang;
        const langSlug = slug.join("/") || undefined;
        const langPath = [lang, "ecommerce-insights", langSlug].join("/");

        // get slug for translated blog posts
        const otherLang = otherLanguage(lang);
        const postsByIdAndLang = getPostsByIdAndLang(blogPosts);
        // there is no translation available. Let's use this language's slug for the translation path
        let fullOtherLangSlug = [otherLang, "ecommerce-insights", ...slug];
        // If the post has a translation in the other language, overwrite with that slug
        if (
          post.data.id === postsByIdAndLang[post.data.id]?.[otherLang]?.data.id
        ) {
          const [, ...otherLangSlugArr] =
            postsByIdAndLang[post.data.id][otherLang].slug.split("/");
          fullOtherLangSlug = [
            otherLang,
            "ecommerce-insights",
            ...otherLangSlugArr,
          ];
          // if post file names are different, then we need to create the <link rel="alternate" hreflang="x" href="y"> tags
          if (langSlug !== otherLangSlugArr.join("/")) {
            createLinkRelHreflang = true;
          }
        }
        const otherLangPath = fullOtherLangSlug.join("/");

        // add the link rel="alternate" hreflang="x" href="y" tags for SEO if neccessary
        let hrefLangLinks = [];
        if (createLinkRelHreflang) {
          const baseUrl = import.meta.env.BASE_URL;
          const cleanSite = Astro.site?.toString().slice(0, -1);

          hrefLangLinks.push({
            lang: lang,
            href: `${cleanSite}${baseUrl}/${langPath}`,
          });
          hrefLangLinks.push({
            lang: otherLang,
            href: `${cleanSite}${baseUrl}/${otherLangPath}`,
          });
        }
        return {
          params: {
            lang,
            slug: langSlug,
          },
          props: {
            post,
            langPath: langPath,
            otherLangPath: otherLangPath,
            hrefLangLinks: hrefLangLinks,
          },
        };
      });
    })
    .flatMap((path) => path);

  return paths;
}

const { lang, slug } = Astro.params;
const { post, langPath, otherLangPath, hrefLangLinks } = Astro.props;
const { Content } = await post.render();

// TODO add a google translate button for blog posts, where ther is no translation available: https://www.geeksforgeeks.org/add-google-translate-button-webpage/
---

<MarkdownPostLayout
  frontmatter={post.data}
  lang={lang}
  langSwitchPath={otherLangPath}
  hrefLangLinks={hrefLangLinks}
>
  <Content />
</MarkdownPostLayout>
