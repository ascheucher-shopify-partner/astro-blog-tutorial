---
import { getCollection } from "astro:content";
import { languages } from "@lib/i18n/ui";
import { getRelativeLocaleUrl } from "astro:i18n";
import { type PostsByLang } from "@lib/i18n/utils";
import * as I18nUtils from "@lib/i18n/utils";
import type { Post } from "@content/config";

import MarkdownPostLayout from "../../../layouts/MarkdownPostLayout.astro";

export async function getStaticPaths() {
  const hasPostTranslation = (
    postsByIdAndLang: PostsByLang<Post>,
    post: Post
  ): boolean => Object.keys(postsByIdAndLang[post.data.id]).length > 1;

  const supportedLanguages = Object.keys(languages);
  const blogPosts = await getCollection("posts");
  const postsByIdAndLang = I18nUtils.getPostsByIdAndLang(blogPosts);
  const blogPath = "ecommerce-insights";

  const paths = supportedLanguages
    .map((lang: string) => {
      return I18nUtils.filterPostsForLang(blogPosts, lang).map((post) => {
        // we don't use the Astro language fallback solution for not translated
        // blog lists, as we want to have a fallback in both directions.
        const langPostSlug = I18nUtils.getPostSlug(post);
        // const langPath = [getRelativeLocaleUrl(lang), blogPath].join("/");

        // get slug for translated blog posts
        const otherLang = I18nUtils.otherLanguage(lang);
        // for no translation: use this the same slug for the translation.
        let otherLangPostSlug = langPostSlug;
        let otherLangPostPath = getRelativeLocaleUrl(
          otherLang,
          `${blogPath}/${langPostSlug}`
        );
        if (hasPostTranslation(postsByIdAndLang, post)) {
          // overwrite with that slug
          otherLangPostSlug = I18nUtils.getPostSlug(
            I18nUtils.getOtherLangPost(postsByIdAndLang, post)
          );
          otherLangPostPath = getRelativeLocaleUrl(
            otherLang,
            `${blogPath}/${otherLangPostSlug}`
          );
        }

        // add the link rel="alternate" hreflang="x" href="y" tags for SEO if neccessary sdf
        let hrefLangLinks = I18nUtils.getHrefLangLinks(
          I18nUtils.needsHreflangLinks(langPostSlug, otherLangPostSlug),
          lang,
          `${blogPath}/${langPostSlug}`,
          otherLang,
          `${blogPath}/${otherLangPostSlug}`
        );

        return {
          params: {
            lang,
            slug: langPostSlug,
          },
          props: {
            post,
            otherLangPath: otherLangPostPath,
            hrefLangLinks: hrefLangLinks,
          },
        };
      });
    })
    .flatMap((p) => p);

  return paths;
}

const { lang } = Astro.params;
const { post, otherLangPath, hrefLangLinks } = Astro.props;
const { Content } = await post.render();

// TODO add a google translate button for blog posts, where ther is no translation available:
// https://www.geeksforgeeks.org/add-google-translate-button-webpage/
---

<MarkdownPostLayout
  frontmatter={post.data}
  lang={lang}
  langSwitchPath={otherLangPath}
  hrefLangLinks={hrefLangLinks}
>
  <Content />
</MarkdownPostLayout>
