---
import { getCollection } from "astro:content";
import { languages } from "@lib/i18n/ui";
import { filterPostsForLang, otherLanguage, useTranslations } from "@lib/i18n/utils";
import { getRelativeLocaleUrl } from "astro:i18n";

import BaseLayout from "../../../layouts/BaseLayout.astro";
import BlogPostLi from "@components/BlogPostLi.astro";


export async function getStaticPaths() {
  const langKeys = Object.keys(languages);
  const paths = langKeys.map((lk) => {
    const otherLang = otherLanguage(lk);
    return {
      params: {
        lang: lk,
      },
      props: {
        otherLangPath: `${getRelativeLocaleUrl(otherLang)}/ecommerce-insights`,
      },
    };
  });

  return paths;
}

const { lang } = Astro.params;
const { otherLangPath } = Astro.props;

const t = useTranslations(lang as 'en' | 'de');
const pageTitle = t('page.blog');
const allPosts = await getCollection("posts");
const langPosts = filterPostsForLang(allPosts, lang);
---

<BaseLayout lang={lang} langSwitchPath={otherLangPath} pageTitle={pageTitle}>
  <p>{t('blog.description')}</p>
  <ul>
    {
      langPosts.map((post) => {
        const postLang = post.id.split("/")[0];
        const postSlugNoLang = post.slug.split("/")[1];
        return (
          <BlogPostLi
            url={`${getRelativeLocaleUrl(lang)}/ecommerce-insights/${postSlugNoLang}`}
            title={`${post.data.title} - ${postLang.toUpperCase()}`}
          />
        );
      })
    }
  </ul>
</BaseLayout>
